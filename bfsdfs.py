# -*- coding: utf-8 -*-
"""BFSDFS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lgLkLPm7ZsPZ38iAm7kqHqCbtb12wICi

# **Lab3**
1.Made an undirected graph with the cities names as nodes and keys.\
2.Nodes =8.\
3.Edges =8.
"""

from collections import deque

# made an undirected graph
pakistan_cities = {
    'Lahore': ['Islamabad'],
    'Islamabad': ['Lahore', 'Karachi'],
    'Karachi': ['Islamabad', 'Multan', 'Quetta'],
    'Multan': ['Karachi', 'Peshawar'],
    'Quetta': ['Karachi'],
    'Peshawar': ['Multan', 'Hyderabad'],
    'Hyderabad': ['Peshawar', 'Sukkur'],
    'Sukkur': ['Hyderabad']
    }

# bfs function made
def bfs(g,s,G):
    queue=deque([[s]])
    visited=set()
    while queue:
        path=queue.popleft()
        current=path[-1]
        if current==G:
            return path
        if current not in visited:
            visited.add(current)
            for neighbor in g.get(current,[]):
                new_path=list(path)
                new_path.append(neighbor)
                queue.append(new_path)
    return None

# Example test: Find path from Lahore to Quetta
start_city = 'Lahore'
goal_city = 'Quetta'

path = bfs(pakistan_cities, start_city, goal_city)

if path:
    print(f"Path from {start_city} to {goal_city}: {path}")
else:
    print(f"No path found from {start_city} to {goal_city}")

# dfs function made
def dfs(g,s,G,path=None,visited=None):
    if path is None:
        path=[]
    if visited is None:
        visited=set()

    path.append(s)
    visited.add(s)

    if s==G:
        return path

    for neighbor in g.get(s,[]):
        if neighbor not in visited:
            result=dfs(g,neighbor,G,path.copy(),visited.copy())
            if result:
                return result
    return None

# Example test: Find path from Lahore to Quetta using DFS
start_city_dfs = 'Lahore'
goal_city_dfs = 'Quetta'

path_dfs = dfs(pakistan_cities, start_city_dfs, goal_city_dfs)

if path_dfs:
    print(f"Path from {start_city_dfs} to {goal_city_dfs} using DFS: {path_dfs}")
else:
    print(f"No path found from {start_city_dfs} to {goal_city_dfs} using DFS")